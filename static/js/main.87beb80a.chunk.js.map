{"version":3,"sources":["components/Controls/style.js","components/Controls/Controls.js","services/pathfinder/Pathfinder.js","components/Node/style.js","components/Node/Node.js","components/Grid/style.js","components/Grid/Grid.js","views/Game.js","App.js","index.js"],"names":["ControlsWrapper","styled","div","Button","button","Input","input","Label","label","SelectedButton","Checkbox","Controls","size","setSize","mode","setMode","setReset","reset","delay","setDelay","showLabels","setShowLabels","diagonal","setDiagonal","React","useState","inputSize","setInputSize","onClick","onChange","target","Number","value","type","checked","delayByMs","ms","Promise","resolve","setTimeout","instantiateStartAndEnd","startNode","endNode","node","gCost","calcGCost","hCost","calcHCost","fCost","findPathWithoutDiagonal","gridData","setGridData","flat","find","state","openSet","closedSet","currentNode","neighbors","getNeighbors","neighbor","parent","push","pathFind","length","sort","a","b","shift","alreadySetPath","includes","index","findIndex","findPath","diagonalNeighbors","getDiagonalNeighbors","calcLinearCost","calcDiagonalCost","Math","round","checkNode","row","col","checkRow","checkCol","dMax","max","abs","dMin","min","filter","startRow","startCol","endRow","endCol","NodeWrapper","CostInfo","LeftInfo","span","RigthInfo","CenterInfo","Node","clickAction","style","backgroundColor","width","height","color","GridWrapper","i","Grid","useEffect","initialGrid","Array","fill","map","rowIndex","v","colIndex","runPathFinder","resetState","nodeIndex","key","Game","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.87beb80a.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const ControlsWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n  width: 100%;\n  margin-top: 20px;\n`;\n\nexport const Button = styled.button`\n  width: 100px;\n  height: 50px;\n  background-color: #fff;\n  border: 1px solid #000;\n  border-radius: 5px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n  font-size: 1.2rem;\n  margin-left: 10px;\n  &:hover {\n    transform: scale(1.05);\n  }\n`;\n\nexport const Input = styled.input`\n  width: 100px;\n  height: 45px;\n  background-color: #fff;\n  border: 1px solid #000;\n  border-radius: 5px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n  transition: all 0.2s ease-in-out;\n  font-size: 1.2rem;\n  margin-left: 10px;\n  &:hover {\n    transform: scale(1.05);\n  }\n`;\n\nexport const Label = styled.label`\n  font-size: 1.2rem;\n  padding-right: 10px;\n`;\n\nexport const SelectedButton = styled(Button)`\n  background-color: #000;\n  color: #fff;\n`;\n\nexport const Checkbox = styled.input`\n  width: 20px;\n  height: 20px;\n  margin-left: 10px;\n`;","import React from 'react';\nimport { Button, Checkbox, ControlsWrapper, Input, Label, SelectedButton } from './style';\n\nexport default function Controls({\n  size,\n  setSize,\n  mode,\n  setMode,\n  setReset,\n  reset,\n  delay,\n  setDelay,\n  showLabels,\n  setShowLabels,\n  diagonal,\n  setDiagonal,\n}) {\n  const [inputSize, setInputSize] = React.useState(size);\n\n  return (\n    <ControlsWrapper>\n      <Button onClick={() => setMode('running')}>start</Button>\n      {mode !== 'placeStart' ? (\n        <Button onClick={() => {\n          setReset(!reset);\n          setMode('placeStart');\n        }}>Select Start</Button>\n      ): (\n        <SelectedButton>Select Start</SelectedButton>\n      )}\n      {mode !== 'placeEnd' ? (\n        <Button onClick={() => setMode('placeEnd')}>Select End</Button>\n      ): (\n        <SelectedButton>Select End</SelectedButton>\n      )}\n      <Button onClick={() => {\n        setReset(!reset);\n        setMode('placeStart');\n      }}>Reset</Button>\n      <Label>\n        Scale\n        <Input onChange={target => {\n          setInputSize(Number(target.target.value))\n        }} value={inputSize} type={\"number\"} />\n        <Button onClick={() => setSize(inputSize)}>Resize</Button>\n      </Label>\n      <Label>\n        Delay\n        <Input onChange={target => {\n          setDelay(Number(target.target.value))\n        }} value={delay} type={\"number\"} />\n      </Label>\n      <Label>\n        Show Labels\n        <Checkbox onChange={target => {\n          setShowLabels(target.target.checked);\n        }} value={showLabels} checked={showLabels} type={\"checkbox\"} />\n      </Label>\n      <Label>\n        Use Diagonals\n        <Checkbox onChange={target => {\n          setDiagonal(target.target.checked);\n        }} value={diagonal} checked={diagonal} type={\"checkbox\"} />\n      </Label>\n    </ControlsWrapper>\n  )\n}","function delayByMs(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction instantiateStartAndEnd(startNode, endNode) {\n  for (const node of [startNode, endNode]) {\n    node.gCost = calcGCost(node, startNode);\n    node.hCost = calcHCost(node, endNode);\n    node.fCost = node.gCost + node.hCost;\n  }\n} \n\nexport async function findPathWithoutDiagonal({\n  delay,\n  gridData,\n  setGridData,\n}) {\n  const startNode = gridData.flat().find(node => node.state === 'start');\n  const endNode = gridData.flat().find(node => node.state === 'end');\n  instantiateStartAndEnd(startNode, endNode);\n  const openSet = [];\n  const closedSet = [];\n\n  let currentNode = startNode;\n  currentNode.state = 'tested';\n\n  const neighbors = getNeighbors(currentNode, gridData);\n\n  for (const neighbor of neighbors) {\n    neighbor.gCost = calcGCost(neighbor, startNode);\n    neighbor.hCost = calcHCost(neighbor, endNode);\n    neighbor.fCost = neighbor.gCost + neighbor.hCost;\n    neighbor.parent = currentNode;\n    neighbor.state = 'option';\n    openSet.push(neighbor);\n  }\n\n  let pathFind =false;\n\n  startNode.state = 'tested';\n  while (openSet.length > 0 && !pathFind) {\n    await delayByMs(delay);\n\n    openSet.sort((a, b) => a.fCost - b.fCost || a.hCost - b.hCost);\n    currentNode = openSet.shift();\n    currentNode.state = 'tested';\n\n    if (currentNode === endNode) {\n      const alreadySetPath = [];\n\n      while (!alreadySetPath.includes(currentNode.parent)) {\n        currentNode.state = 'path';\n        currentNode = currentNode.parent;\n        alreadySetPath.push(currentNode);\n      }\n      pathFind = true;\n      break;\n    }\n\n    const neighbors = getNeighbors(currentNode, gridData);\n\n    for (const neighbor of neighbors) {\n        neighbor.gCost = calcGCost(neighbor, startNode);\n        neighbor.parent = currentNode;\n        neighbor.hCost = calcHCost(neighbor, endNode);\n        neighbor.fCost = neighbor.gCost + neighbor.hCost;\n\n        if (!openSet.includes(neighbor)) {\n          neighbor.state = 'option';\n          openSet.push(neighbor);\n        } else {\n          const index = openSet.findIndex(node => node === neighbor);\n          openSet[index] = neighbor;\n        }\n    }\n\n    closedSet.push(currentNode);\n    currentNode.state = 'closed';\n    setGridData([...gridData]);\n  }\n  startNode.state = 'path';\n\n  setGridData([...gridData]);\n}\n\nexport async function findPath({\n  delay,\n  gridData,\n  setGridData,\n}) {\n  const startNode = gridData.flat().find(node => node.state === 'start');\n  const endNode = gridData.flat().find(node => node.state === 'end');\n  instantiateStartAndEnd(startNode, endNode);\n\n  const openSet = [];\n  const closedSet = [];\n\n  let currentNode = startNode;\n\n  const neighbors = getNeighbors(currentNode, gridData);\n  const diagonalNeighbors = getDiagonalNeighbors(currentNode, gridData);\n\n  for (const neighbor of neighbors) {\n    neighbor.gCost = currentNode.gCost + 10;\n    neighbor.hCost = calcLinearCost(neighbor, endNode);\n    neighbor.fCost = neighbor.gCost + neighbor.hCost;\n    neighbor.parent = currentNode;\n    neighbor.state = 'option';\n    openSet.push(neighbor);\n  }\n\n  for (const neighbor of diagonalNeighbors) {\n    neighbor.gCost = currentNode.gCost + 14;\n    neighbor.hCost = calcDiagonalCost(neighbor, endNode);\n    neighbor.fCost = neighbor.gCost + neighbor.hCost;\n    neighbor.parent = currentNode;\n    neighbor.state = 'option';\n    openSet.push(neighbor);\n  }\n\n  let pathFind =false;\n\n  startNode.state = 'tested';\n  while (openSet.length > 0 && !pathFind) {\n    await delayByMs(delay);\n\n    openSet.sort((a, b) => a.fCost - b.fCost || a.hCost - b.hCost);\n    currentNode = openSet.shift();\n    currentNode.state = 'tested';\n\n    if (currentNode === endNode) {\n      const alreadySetPath = [];\n\n      while (!alreadySetPath.includes(currentNode.parent)) {\n        currentNode.state = 'path';\n        currentNode = currentNode.parent;\n        alreadySetPath.push(currentNode);\n      }\n      pathFind = true;\n      break;\n    }\n\n    const neighbors = getNeighbors(currentNode, gridData);\n    const diagonalNeighbors = getDiagonalNeighbors(currentNode, gridData);\n\n    for (const neighbor of neighbors) {\n      if (neighbor !== startNode) {\n        neighbor.gCost = currentNode.gCost + 10;\n        neighbor.hCost = calcLinearCost(neighbor, endNode);\n        neighbor.fCost = neighbor.gCost + neighbor.hCost;\n      }\n      \n      neighbor.parent = currentNode;\n      \n\n      if (!openSet.includes(neighbor)) {\n        neighbor.state = 'option';\n        openSet.push(neighbor);\n      } else {\n        const index = openSet.findIndex(node => node === neighbor);\n        openSet[index] = neighbor;\n      }\n    }\n  \n    for (const neighbor of diagonalNeighbors) {\n      if (neighbor !== startNode) {\n        neighbor.gCost = currentNode.gCost + 14;\n        neighbor.hCost = Math.round(calcLinearCost(neighbor, endNode));\n        neighbor.fCost = neighbor.gCost + neighbor.hCost;\n      }\n      neighbor.parent = currentNode;\n\n      if (!openSet.includes(neighbor)) {\n        neighbor.state = 'option';\n        openSet.push(neighbor);\n      } else {\n        const index = openSet.findIndex(node => node === neighbor);\n        openSet[index] = neighbor;\n      }\n    }\n\n    closedSet.push(currentNode);\n    currentNode.state = 'closed';\n    setGridData([...gridData]);\n  }\n  startNode.state = 'path';\n\n  setGridData([...gridData]);\n}\n\nfunction calcDiagonalCost(node, checkNode) {\n  const [row, col] = node.index;\n  const [checkRow, checkCol] = checkNode.index;\n\n  const dMax = Math.max(Math.abs(row - checkRow), Math.abs(col - checkCol));\n  const dMin = Math.min(Math.abs(row - checkRow), Math.abs(col - checkCol));\n\n  return Math.abs(14 + (10 * (dMax - dMin))) * 4;\n  \n}\n\nfunction calcLinearCost(node, checkNode) {\n  const [row, col] = node.index;\n  const [checkRow, checkCol] = checkNode.index;\n\n  return (Math.abs(row - checkRow) + Math.abs(col - checkCol)) * 10;\n}\n\nfunction getNeighbors(node, gridData) {\n  const neighbors = [];\n  const [row, col] = node.index;\n\n  if (row > 0) {\n    neighbors.push(gridData[row - 1][col]);\n  }\n  if (row < gridData.length - 1) {\n    neighbors.push(gridData[row + 1][col]);\n  }\n  if (col > 0) {\n    neighbors.push(gridData[row][col - 1]);\n  }\n  if (col < gridData.length - 1) {\n    neighbors.push(gridData[row][col + 1]);\n  }\n\n  return neighbors.filter(neighbor => !['closed', 'start', 'wall'].includes(neighbor.state))\n}\n\nfunction getDiagonalNeighbors(node, gridData) {\n  const neighbors = [];\n  const [row, col] = node.index;\n\n  if (row > 0 && col > 0) {\n    neighbors.push(gridData[row - 1][col - 1]);\n  }\n  if (row > 0 && col < gridData.length - 1) {\n    neighbors.push(gridData[row - 1][col + 1]);\n  }\n  if (row < gridData.length - 1 && col > 0) {\n    neighbors.push(gridData[row + 1][col - 1]);\n  }\n  if (row < gridData.length - 1 && col < gridData.length - 1) {\n    neighbors.push(gridData[row + 1][col + 1]);\n  }\n\n  return neighbors.filter(neighbor => !['closed', 'start', 'wall'].includes(neighbor.state))\n}\n\nfunction calcGCost(node, startNode) {\n  const [row, col] = node.index;\n  const [startRow, startCol] = startNode.index;\n\n  return (Math.abs(row - startRow) + Math.abs(col - startCol)) * 10;\n}\n\nfunction calcHCost(node, endNode) {\n  const [row, col] = node.index;\n  const [endRow, endCol] = endNode.index;\n\n  return (Math.abs(row - endRow) + Math.abs(col - endCol)) * 10;\n}","import styled from \"styled-components\";\n\nexport const NodeWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 50px;\n  height: 50px;\n  background-color: #fff;\n  border-radius: 5px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n  &:hover {\n    transform: scale(1.05);\n  }\n`;\n\nexport const CostInfo = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`;\n\nexport const LeftInfo = styled.span`\n  font-size: 1rem;\n  margin-left: 10px;\n  margin-top: 5px;\n`;\n\nexport const RigthInfo = styled.span`\n  font-size: 1rem;\n  margin-right: 10px;\n  margin-top: 5px;\n`;\n  \nexport const CenterInfo = styled.span`\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n  margin-right: 5px;\n`;","import React from 'react';\nimport { CenterInfo, CostInfo, LeftInfo, NodeWrapper, RigthInfo } from './style';\n\nexport default function Node({\n  gCost,\n  hCost,\n  fCost,\n  state,\n  size,\n  clickAction,\n  index,\n  showLabels,\n}) {\n  const colors = {\n    'open': '#fff',\n    'closed': '#e04a24',\n    'start': '#03fc84',\n    'option': '#03fc84',\n    'end': '#03dbfc',\n    'wall': '#000',\n    'path': '#03dbfc',\n    'tested': '#91a6c7',\n  };\n\n  const lettersColors = {\n    'open': '#000',\n    'closed': '#fff',\n    'start': '#000',\n    'option': '#000',\n    'end': '#000',\n    'wall': '#fff',\n    'path': '#000',\n    'tested': '#000',\n  }\n\n  return (\n    <NodeWrapper\n      style={{\n        backgroundColor: colors[state],\n        width: `${100 / size}%`,\n        height: `${900 / size}px`,\n        color: lettersColors[state],\n      }}\n      onClick={() => clickAction(...index)}\n    >\n      {showLabels === true ? (\n        <>\n          <CostInfo>\n            <LeftInfo>{gCost}</LeftInfo>\n            <RigthInfo>{hCost}</RigthInfo>\n          </CostInfo>\n          <CenterInfo>{fCost}</CenterInfo>\n        </>\n      ) : (<></>)}\n    </NodeWrapper>\n  );\n}\n","import styled from \"styled-components\";\n\nexport const GridWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  flex-wrap: wrap;\n`;","import React, { useEffect, useState } from 'react';\nimport { findPathWithoutDiagonal, findPath } from '../../services/pathfinder/Pathfinder';\nimport Node from '../Node/Node';\nimport { GridWrapper } from './style';\n\nexport default function Grid({ size, mode, setMode, reset, delay, showLabels, diagonal }) {\n  const [gridData, setGridData] = useState([]);\n\n  useEffect(() => {\n    // set initial grid\n    const initialGrid = new Array(size).fill(0).map((value, rowIndex) => new Array(size).fill(0).map((v, colIndex) => ({\n      gCost: 0,\n      hCost: 0,\n      fCost: 0,\n      index: [rowIndex, colIndex],\n      state: 'open',\n    })));\n\n    setGridData(initialGrid);\n  }, [size, reset]);\n\n  useEffect(() => {\n    if (mode === 'running') {\n      const runPathFinder = async () => {\n        if (diagonal) {\n          await findPath({\n            delay,\n            gridData,\n            setGridData,\n          });\n        } else {\n          await findPathWithoutDiagonal({\n            delay,\n            gridData,\n            setGridData,\n          });\n        }\n      };\n\n      runPathFinder();\n    }\n  }, [mode]);\n\n  const resetState = state => {\n    for (const row of gridData) {\n      for (const node of row) {\n        if (node.state === state) {\n          node.state = 'open';\n        }\n      }\n    }\n  }\n\n  const clickAction = (row, col) => {\n    const node = gridData[row][col];\n\n    switch(mode) {\n      case 'placeStart':\n        resetState('start');\n        node.state = 'start';\n        setMode('placeEnd'); \n        break;\n      case 'placeEnd':\n        resetState('end');\n        node.state = 'end';\n        setMode('placeWalls');\n        break;\n      case 'placeWalls':\n        if (node.state === 'open') {\n          node.state = 'wall';\n        } else if (node.state === 'wall') {\n          node.state = 'open';\n        }\n        break;\n      default:\n        break;\n    }\n\n    setGridData([...gridData]);\n  };\n\n  return (\n    <GridWrapper>\n      {gridData.map((row, rowIndex) => (\n        <>\n          {row.map((node, nodeIndex) => (\n            <Node\n              key={`${rowIndex}-${nodeIndex}`}\n              clickAction={clickAction}\n              size={gridData.length}\n              index={[rowIndex, nodeIndex]}\n              showLabels={showLabels}\n              {...node}\n            />\n          ))}\n        </>\n      ))}\n    </GridWrapper>\n  );\n}\n","import React, { useState } from 'react';\nimport Controls from '../components/Controls/Controls';\nimport Grid from '../components/Grid/Grid';\n\nexport default function Game() {\n  const [size, setSize] = useState(10);\n  const [delay, setDelay] = useState(50);\n  const [mode, setMode] = useState('placeStart');\n  const [reset, setReset] = useState(false);\n  const [showLabels, setShowLabels] = useState(true);\n  const [diagonal, setDiagonal] = useState(false);\n\n\n  return (\n    <>\n      <Grid\n        size={size}\n        mode={mode}\n        setMode={setMode}\n        reset={reset}\n        delay={delay}\n        showLabels={showLabels}\n        diagonal={diagonal}\n      />\n      <Controls\n        size={size}\n        setSize={setSize}\n        mode={mode}\n        setMode={setMode}\n        setReset={setReset}\n        reset={reset}\n        delay={delay}\n        setDelay={setDelay}\n        showLabels={showLabels}\n        setShowLabels={setShowLabels}\n        diagonal={diagonal}\n        setDiagonal={setDiagonal}\n      />\n    </>\n  );\n}\n","import React from 'react';\nimport Game from './views/Game';\n\nfunction App() {\n  return (\n    <Game/>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}